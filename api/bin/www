#!/usr/bin/env node

/*
 This bin file is based on Express Generator's with more comments and minor changes.
 Express 4 recommends using the bin/www file to start web servers rather than running
 it in app.js.
 
 npx-express-generator uses a deprecated template engine, so this project was scaffolded
 without it.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

//Import secure server for login + admin abilities
const https = require('https');
const fs = require('fs');

//Get port from environment and store in Express.

//80 is default port number for HTTP traffic.
//Since we can't use ports under 1024, setting to 3080.
var port = normalizePort(process.env.PORT || '3080');
app.set('port', port);
//443 is default port for HTTPS traffic; setting secure port to 3443.
app.set('secPort', port+363);


//Create HTTP server.

var server = http.createServer(app);

//Listen on provided port, on all network interfaces.

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//Create HTTPS server.

const options = {
  key: fs.readFileSync(__dirname+'/server.key'),
  cert: fs.readFileSync(__dirname+'/server.cert')
};

const secureServer = https.createServer(options, app);


//Listen on provided port, on all network interfaces.

secureServer.listen(app.get('secPort'), () => {
    console.log('Server listening on port', app.get('secPort'));
});
secureServer.on('error', onError);
secureServer.on('listening', onListening);


//Normalize a port into a number, string, or false.

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


//Event listener for HTTP server "error" event.

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  //Handles specific error codes with messages.
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


//Event listener for HTTP server "listening" event.

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
